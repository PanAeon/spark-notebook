{
  "metadata" : {
    "name" : "Flow Example",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val t = out",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import notebook.front.widgets.{BoxPipeComponent, PipeComponent, CustomizableBoxPipe}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "case class SumPipeComp(id:String = java.util.UUID.randomUUID.toString,\n                      mult:String=\"1\") \n  extends BoxPipeComponent[SumPipeComp]() {\n    \n  val name = \"sumPipe\"\n\n  val inPorts: List[String] = List(\"in\")\n  val outPorts: List[String] = List(\"out\")\n\n  val parameters = Map(\"mult\" → mult)\n  \n  def extractMult:Int = parameters(\"mult\").toInt\n\n  def next(a: Map[String,Any]): Map[String,Any] = {\n    a(\"in\") match {\n      case i:Int => Map(\"out\" → (extractMult * i))\n      case _ => ???\n    }\n  }\n\n  def merge(j:play.api.libs.json.JsValue):SumPipeComp = copy(\n    mult = (j \\ \"parameters\" \\ \"mult\").as[String]\n  )\n  \n  override val toString = toJSON.toString\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "Flow.registerPipeComponent(\"sumPipe\", (() => SumPipeComp()))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "output_stream_collapsed" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val f:Flow = Flow()",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      }
    },
    "cell_type" : "code",
    "source" : "f.data.filter(_.isInstanceOf[CustomizableBoxPipe])\n      .foreach(_.asInstanceOf[CustomizableBoxPipe].update(\"f\", $intp))",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "We can use two cusomizable with those functions:\n\n\n```scala\n(a:Map[String, Any])=>Map(\"even\" → (a(\"in\").asInstanceOf[RDD[Int]].filter(_ % 2 == 0)).map(x=>(x.toString, x))\n```\n\n```scala\n(a:Map[String, Any])=>Map(\"square\" → (a(\"in\").asInstanceOf[RDD[Int]].map(x => (x.toString, x*x)))\n```\n\n```scala\n(a:Map[String, Any])=> Map(\"join\" → (a(\"left\").asInstanceOf[RDD[(String, Int)]].join(a(\"right\").asInstanceOf[RDD[(String, Int)]]))\n```\n\n```scala\n(a:Map[String, Any])=> Map(\"collect\" → (a(\"in\").asInstanceOf[RDD[_]].collect)\n```"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// filterEventPipe → CollectPipe\nvar first = true\nval result = f.run {\n  case x => if (first) {\n    first = false\n    Map(\"in\" → sparkContext.parallelize(1 to 100))\n  } else {\n    Map(\"in\" → sparkContext.parallelize(2 to 200 by 2))\n  }\n}",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}